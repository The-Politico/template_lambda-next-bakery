{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport './index.css';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nfunction _extends() {\n  _extends = _Object$assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar styles = {\n  \"fill-politico-red\": \"politico_style_sketch___1GpeDIKTuN\",\n  \"courier\": \"politico_style_sketch___3f4-i4le3Y\",\n  \"fancy-serif\": \"politico_style_sketch___2VFRDVzD8u\",\n  \"styles\": \"politico_style_sketch___12VDiRAoae\",\n  \"spinAround\": \"politico_style_sketch___YCO3b7SQZc\"\n};\n\nvar Select = function Select(props) {\n  var inputProps = _Object$assign({}, props);\n\n  delete inputProps.help;\n  delete inputProps.label;\n  delete inputProps.wrapperClassName;\n  delete inputProps.options;\n  delete inputProps.placeholder;\n  return React.createElement(\"div\", {\n    id: \"container-\".concat(props.id),\n    className: classnames('field', props.wrapperClassName, styles.styles)\n  }, props.label.length > 0 && React.createElement(\"label\", {\n    className: \"label\",\n    id: \"label-\".concat(props.id),\n    htmlFor: props.id\n  }, props.label), React.createElement(\"div\", {\n    className: classnames('control is-expanded', {\n      error: props.error\n    })\n  }, React.createElement(\"div\", {\n    className: classnames('select', {\n      'is-multiple': inputProps.multiple\n    })\n  }, React.createElement(\"select\", _extends({\n    value: props.value\n  }, inputProps, {\n    className: classnames(props.className, 'input')\n  }), React.createElement(\"option\", {\n    disabled: true,\n    hidden: true,\n    key: \"0\",\n    value: \"\"\n  }, props.placeholder), props.options.map(function (option, idx) {\n    return React.createElement(\"option\", {\n      key: idx + 1,\n      value: option.id\n    }, option.label);\n  })))), props.help.length > 0 && React.createElement(\"p\", {\n    id: \"help-\".concat(props.id),\n    className: classnames('help', {\n      error: props.error\n    })\n  }, props.help));\n};\n\nSelect.defaultProps = {\n  id: '',\n  className: '',\n  wrapperClassName: '',\n  help: '',\n  label: '',\n  value: '',\n  placeholder: '',\n  options: [],\n  error: false\n};\nSelect.propTypes = {\n  id: PropTypes.string,\n  className: PropTypes.string,\n  wrapperClassName: PropTypes.string,\n  help: PropTypes.string,\n  error: PropTypes.bool,\n  label: PropTypes.string,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  placeholder: PropTypes.string,\n  options: PropTypes.array,\n  autofocus: PropTypes.bool,\n  disabled: PropTypes.bool,\n  multiple: PropTypes.bool,\n  name: PropTypes.string,\n  onChange: PropTypes.func,\n  required: PropTypes.bool,\n  size: PropTypes.number\n};\nexport default Select;","map":null,"metadata":{},"sourceType":"module"}