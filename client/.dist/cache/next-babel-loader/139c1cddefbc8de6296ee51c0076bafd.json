{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport './index.css';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport Editor from 'rich-markdown-editor';\n\nfunction _extends() {\n  _extends = _Object$assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar styles = {\n  \"styles\": \"politico_style_sketch___3TGg-JCByi\",\n  \"spinAround\": \"politico_style_sketch___176BYhTeRS\"\n};\n\nvar RichText = function RichText(props) {\n  var inputProps = _Object$assign({}, props);\n\n  delete inputProps.help;\n  delete inputProps.label;\n  delete inputProps.wrapperClassName;\n  delete inputProps.value;\n  delete inputProps.onChange;\n\n  var onChange = function onChange(content) {\n    props.onChange(content());\n  };\n\n  return React.createElement(\"div\", {\n    id: \"container-\".concat(props.id),\n    className: classnames('field', props.wrapperClassName, styles.styles)\n  }, props.label.length > 0 && React.createElement(\"label\", {\n    className: \"label\",\n    id: \"label-\".concat(props.id),\n    htmlFor: props.id\n  }, props.label), React.createElement(\"div\", {\n    className: classnames('control', {\n      error: props.error\n    })\n  }, React.createElement(Editor, _extends({\n    defaultValue: props.value ? props.value : '',\n    onChange: onChange\n  }, inputProps))), props.help.length > 0 && React.createElement(\"p\", {\n    id: \"help-\".concat(props.id),\n    className: classnames('help', {\n      error: props.error\n    })\n  }, props.help));\n};\n\nRichText.defaultProps = {\n  id: '',\n  className: '',\n  wrapperClassName: '',\n  help: '',\n  label: '',\n  value: '',\n  error: false\n};\nRichText.propTypes = {\n  id: PropTypes.string,\n  className: PropTypes.string,\n  wrapperClassName: PropTypes.string,\n  help: PropTypes.string,\n  label: PropTypes.string,\n  value: PropTypes.string,\n  error: PropTypes.bool\n};\nexport default RichText;","map":null,"metadata":{},"sourceType":"module"}